#include "generatorserversource.h"

#include "utils.h"

GeneratorServerSource::GeneratorServerSource(const Settings& settings) : Generator(settings)
{

}

void GeneratorServerSource::generate(std::ostream& stream)
{
    //// Get RPC call function =================================================

    std::string rpcCallFunction = "call_rpc";

    if (not mSettings.callRpcName().empty())
    {
        rpcCallFunction = mSettings.callRpcName();
    }

    //// Autogenerated file notify =============================================

    stream << "// File generated by rpcgen tool. All changes will be lost." << std::endl;
    stream << std::endl;

    //// Include ===============================================================

    stream << "#include \"" << mSettings.rpcName() << ".h\"" << std::endl;
    stream << std::endl;

    //// external methods ======================================================

    {
        std::list<std::string> rpcCallParameters;

        if (not mSettings.serverArgs().empty())
        {
            rpcCallParameters.push_back(mSettings.serverArgs());
        }

        rpcCallParameters.push_back("const void* t");
        rpcCallParameters.push_back("void* buf_in");
        rpcCallParameters.push_back("int in_len");
        rpcCallParameters.push_back("void* buf_out");
        rpcCallParameters.push_back("int* out_len");

        stream << "extern " << mSettings.returnType() << " " << rpcCallFunction << "(" << join(rpcCallParameters, ", ") << ");" << std::endl;
        stream << std::endl;
    }

    //// RPC items array =======================================================

    stream << "const " << mSettings.rpcName() << "_rpc_item " << mSettings.rpcName() << "_rpc_tab[] =" << std::endl;

    stream << "{" << std::endl;

    //// Methods list ==========================================================

    for (const Data& data : mSettings.data())
    {
        if (data.type == DATA_MACRO)
        {
            stream << data.name << std::endl;
        }
        else if (data.type == DATA_METHOD)
        {
            std::list<std::string> rpcItem;

            //// Method name ---------------------------------------------------

            rpcItem.push_back("(RPC_F)" + data.name);

            //// Input parameter -----------------------------------------------

            if (not data.in.type.empty())
            {
                if (data.in.varLen)
                {
                    rpcItem.push_back("-1");
                }
                else if (not data.in.size.empty())
                {
                    rpcItem.push_back(data.in.size);
                }
                else
                {
                    rpcItem.push_back("sizeof(" + data.in.type + ")");
                }
            }
            else
            {
                rpcItem.push_back("0");
            }

            //// Output parameter ----------------------------------------------

            if (not data.out.type.empty())
            {
                if (data.out.varLen)
                {
                    rpcItem.push_back("-1");
                }
                else if (not data.out.size.empty())
                {
                    rpcItem.push_back(data.out.size);
                }
                else
                {
                    rpcItem.push_back("sizeof(" + data.out.type + ")");
                }
            }
            else
            {
                rpcItem.push_back("0");
            }

            //// flags ---------------------------------------------------------

            rpcItem.push_back("0");

            //// Server parameters ---------------------------------------------

            if (not mSettings.serverParametersKeys().empty())
            {
                std::list<std::string> params;
                std::map<std::string, std::string> mCustomParameters = data.customParameters;
                std::map<std::string, Args> mDefaultParameters = mSettings.serverParameters();

                for (const std::string& param : mSettings.serverParametersKeys())
                {
                    if (contains(mCustomParameters, param))
                    {
                        params.push_back(mCustomParameters[param]);
                    }
                    else
                    {
                        params.push_back(mDefaultParameters[param].defaultValue);
                    }
                }

                rpcItem.push_back("{" + join(params, ", ") + "}");
            }

            //// ---------------------------------------------------------------

            stream << "    {" << join(rpcItem, ", ") << "}," << std::endl;
        }
    }

    if (mSettings.needTerminator())
    {
        stream << "    {0}," << std::endl;
    }

    stream << "};" << std::endl;

    stream << std::endl;

    //// RPC call method =======================================================

    {
        std::list<std::string> callParameters;

        if (not mSettings.serverArgs().empty())
        {
            callParameters.push_back(mSettings.serverArgs());
        }

        callParameters.push_back("unsigned int id");
        callParameters.push_back("void* buf_in");
        callParameters.push_back("int in_len");
        callParameters.push_back("void* buf_out");
        callParameters.push_back("int* out_len");

        stream << mSettings.returnType() << " call_" << mSettings.rpcName() << "(" << join(callParameters, ", ") << ")" << std::endl;

    }

    stream << "{" << std::endl;

    stream << "    " << mSettings.returnType() << " res;" << std::endl;

    stream << std::endl;

    stream << "    if (id >= (sizeof(" << mSettings.rpcName() << "_rpc_tab) / sizeof(" << mSettings.rpcName() << "_rpc_tab[0])))" << std::endl;
    stream << "    {" << std::endl;
    stream << "        return " << mSettings.errorNoId() << ";" << std::endl;
    stream << "    }" << std::endl;

    stream << std::endl;

    stream << "    const " << mSettings.rpcName() << "_rpc_item* r = &" << mSettings.rpcName() << "_rpc_tab[id];" << std::endl;

    stream << std::endl;

    stream << "    if ((r->in_len >= 0) && (in_len != r->in_len))" << std::endl;
    stream << "    {" << std::endl;
    stream << "        return " << mSettings.errorLenIn() << ";" << std::endl;
    stream << "    }" << std::endl;

    stream << std::endl;

    if (not mSettings.beforeCall().empty())
    {
        stream << "    res = " <<  mSettings.beforeCall() << "(&r->param);" << std::endl;
        stream << "    if (res)" << std::endl;
        stream << "    {" << std::endl;
        stream << "        return res;" << std::endl;
        stream << "    }" << std::endl;

        stream << std::endl;
    }

    {
        std::list<std::string> rpcCallArguments;

        if (not mSettings.serverArgs().empty())
        {
            rpcCallArguments.push_back(after(mSettings.serverArgs(), " "));
        }

        rpcCallArguments.push_back("r");
        rpcCallArguments.push_back("buf_in");
        rpcCallArguments.push_back("in_len");
        rpcCallArguments.push_back("buf_out");
        rpcCallArguments.push_back("out_len");

        stream << "    res = " << rpcCallFunction <<"(" << join(rpcCallArguments, ", ") << ");" << std::endl;
        stream << std::endl;

    }

    if (not mSettings.afterCall().empty())
    {
        stream << "    " << mSettings.afterCall() << "(&r->param);" << std::endl;

        stream << std::endl;
    }

    stream << "    return res;" << std::endl;

    stream << "}" << std::endl;

    stream << std::endl;

    //// =======================================================================

}
