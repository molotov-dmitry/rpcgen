#include "generatorstub.h"

#include "utils.h"

GeneratorStub::GeneratorStub(const Settings &settings) : Generator(settings)
{

}

void GeneratorStub::generate(std::ostream &stream)
{
    //// Autogenerated file notify =============================================

    stream << autogenerateNotify() << std::endl;
    stream << std::endl;

    //// Include ===============================================================

    std::string include;

    if (not mSettings.clientHeader().empty())
    {
        include = mSettings.clientHeader();
    }
    else if (not mSettings.clientServerHeader().empty())
    {
        include  = mSettings.clientServerHeader();
    }
    else
    {
        include = mSettings.rpcName() +".h";
    }

    stream << "#include \"" << include << "\""  << std::endl;
    stream << std::endl;

    //// Methods ===============================================================

    bool dataStarted  = false;
    DataType prevType = DATA_EMPTY_LINE;

    for (const Data& data : mSettings.data())
    {
        if (not dataStarted)
        {
            if (data.type == DATA_EMPTY_LINE)
            {
                continue;
            }
            else
            {
                dataStarted = true;
            }
        }

        //// Add at least empty line between lines -----------------------------

        if (data.type != DATA_COMMENT && data.type != DATA_EMPTY_LINE && prevType != DATA_EMPTY_LINE)
        {
            stream << std::endl;
        }

        prevType = data.type;

        if (data.type == DATA_MACRO || data.type == DATA_COMMENT || data.type == DATA_EMPTY_LINE)
        {
            stream << data.name << std::endl;
        }
        else if (data.type == DATA_METHOD)
        {
            //// Create client method declaration ------------------------------

            std::stringlist parameters;

            if (not mSettings.clientArgs().empty())
            {
                parameters.push_back(mSettings.clientArgs());
            }

            if (not data.inOut.type.empty())
            {
                std::string param = data.inOut.type;

                if (not data.inOut.noptr)
                {
                    param += "* val";
                }
                else
                {
                    param += " val";
                }

                parameters.push_back(param);

                if (data.in.varLen)
                {
                    parameters.push_back("int in_len");
                }

                if (data.out.varLen)
                {
                    parameters.push_back("int* out_len");
                }

            }
            else
            {
                if (not data.in.type.empty())
                {
                    std::string param = data.in.type;

                    if (not data.in.noptr)
                    {
                        param += "* in";
                    }
                    else
                    {
                        param += " in";
                    }

                    parameters.push_back(param);

                    if (data.in.varLen)
                    {
                        parameters.push_back("int in_len");
                    }
                }

                if (not data.out.type.empty())
                {
                    std::string param = data.out.type;

                    if (not data.out.noptr)
                    {
                        param += "* out";
                    }
                    else
                    {
                        param += " out";
                    }

                    parameters.push_back(param);

                    if (data.out.varLen)
                    {
                        parameters.push_back("int* out_len");
                    }
                }
            }

            stream << mSettings.returnType() << " " << data.name << "(" << join(parameters, ", ") << ")" << std::endl;

            //// Client method body --------------------------------------------

            stream << "{" << std::endl;
            stream << "    return 0;" << std::endl;
            stream << "}" << std::endl;

            //// ---------------------------------------------------------------
        }
    }

    //// =======================================================================

    stream << std::endl;
}
